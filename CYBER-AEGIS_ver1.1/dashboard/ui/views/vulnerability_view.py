# CYBER-AEGIS/dashboard/ui/views/vulnerability_view.py

import datetime
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QTextEdit,
                             QLabel, QProgressBar, QHBoxLayout, QFrame)
from PyQt6.QtCore import Qt, QThread, pyqtSignal

# 作成したスキャナをインポート
from src.collectors.hephaestus_scanner import HephaestusScanner

# --- スキャン処理をバックグラウンドで実行するためのWorkerクラス ---
class ScanWorker(QThread):
    """
    UIをフリーズさせずに重いスキャン処理を実行するためのワーカースレッド。
    """
    # スキャン完了時に結果(リスト)を、進捗更新時にパーセンテージ(整数)を通知するシグナルを定義
    scan_finished = pyqtSignal(list)
    progress_updated = pyqtSignal(int)
    
    def __init__(self):
        super().__init__()
        self.scanner = HephaestusScanner()

    def run(self):
        # スキャンを実行し、進捗はprogress_updatedシグナルで、最終結果はscan_finishedシグナルで通知
        results = self.scanner.scan_open_ports(progress_callback=self.progress_updated.emit)
        self.scan_finished.emit(results)


# --- 自己脆弱性診断ビューの本体 ---
class VulnerabilityView(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.scan_thread = None
        self.init_ui()
        # ボタンのクリックイベントを、スキャン開始メソッドに接続
        self.start_scan_button.clicked.connect(self.start_scan)

    def init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        
        scan_control_frame = QFrame()
        scan_control_frame.setFrameShape(QFrame.Shape.StyledPanel)
        scan_control_layout = QVBoxLayout(scan_control_frame)

        scan_label = QLabel("自己脆弱性診断 (Project Hephaestus)")
        scan_label.setStyleSheet("font-size: 20px; font-weight: bold; margin-bottom: 10px;")
        scan_description = QLabel("システムの設定、オープンポート、既知の脆弱性を持つソフトウェアをスキャンし、セキュリティ体制を評価します。")
        scan_description.setWordWrap(True)
        self.start_scan_button = QPushButton("システムスキャンを開始")
        self.start_scan_button.setStyleSheet("font-size: 16px; padding: 10px;")
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)

        scan_control_layout.addWidget(scan_label)
        scan_control_layout.addWidget(scan_description)
        scan_control_layout.addWidget(self.start_scan_button)
        scan_control_layout.addWidget(self.progress_bar)

        results_frame = QFrame()
        results_frame.setFrameShape(QFrame.Shape.StyledPanel)
        results_layout = QVBoxLayout(results_frame)
        results_label = QLabel("診断結果")
        results_label.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 10px;")
        self.results_display = QTextEdit()
        self.results_display.setReadOnly(True)
        self.results_display.setPlaceholderText("スキャンを開始すると、ここに結果が表示されます...")
        results_layout.addWidget(results_label)
        results_layout.addWidget(self.results_display)

        main_layout.addWidget(scan_control_frame)
        main_layout.addWidget(results_frame)

    def start_scan(self):
        # もしスキャンが実行中なら、何もしない
        if self.scan_thread and self.scan_thread.isRunning():
            return
        
        # UIを「スキャン中」の状態に更新
        self.start_scan_button.setEnabled(False)
        self.start_scan_button.setText("スキャン実行中...")
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.results_display.setText("システムをスキャンしています...")
        
        # ワーカースレッドを準備し、シグナルをスロットに接続
        self.scan_thread = ScanWorker()
        self.scan_thread.progress_updated.connect(self.update_progress)
        self.scan_thread.scan_finished.connect(self.display_results)
        
        # スレッドを開始
        self.scan_thread.start()

    def update_progress(self, value):
        # プログレスバーの値を更新するスロット
        self.progress_bar.setValue(value)

    def display_results(self, open_ports):
        # スキャン完了後、結果を表示するスロット
        self.results_display.clear()
        
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        if not open_ports:
            self.results_display.setHtml(f"""
                <h3>調査完了 ({timestamp})</h3>
                <p style="color: #2ecc71; font-weight: bold;">オープンなポートは見つかりませんでした。</p>
                <p>一般的に悪用される可能性のあるネットワークポートはすべて閉じられています。これは良好な状態です。</p>
            """)
        else:
            report_html = f"<h3>調査完了 ({timestamp}): <font color='red'>{len(open_ports)}個のオープンポートを検知</font></h3>"
            report_html += "<ul>"
            for item in open_ports:
                port = item['port']
                service = item['service']
                report_html += f"""<li><b>ポート {port} ({service}): <font color='red'>開いています</font></b>
                                   <br>このポートへのアクセスが意図したものでない場合、不正アクセスの侵入口となるリスクがあります。</li>"""
            report_html += "</ul><hr>"
            report_html += """<p><b>推奨される対応:</b>
                           <ul><li>業務上不要なポートは、OSのファイアウォール機能で閉じてください。</li>
                           <li>ポートを使用しているサービスが最新のバージョンであり、適切に設定されていることを確認してください。</li></ul></p>"""
            self.results_display.setHtml(report_html)

        # UIを「スキャン完了」の状態に戻す
        self.start_scan_button.setEnabled(True)
        self.start_scan_button.setText("再度システムスキャンを実行")